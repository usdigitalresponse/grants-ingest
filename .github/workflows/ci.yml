name: Continuous Integration

on:
  # pull_request_target: {}
  pull_request: {}

jobs:
  qa:
    permissions:
      contents: read
    uses: ./.github/workflows/qa.yml
    with:
      ref: ${{ github.event.pull_request.head.sha }}

  build-lambdas:
    permissions:
      contents: read
    name: Build Lambda handlers
    uses: ./.github/workflows/build.yml
    with:
      ref: ${{ github.event.pull_request.head.sha }}
      build-cli: false
      build-lambdas: true
      artifacts-retention-days: 14

  aws-auth:
    name: Configure AWS Credentials
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    outputs:
      aws-access-key-id: ${{ steps.encrypt-aws-access-key-id.outputs.out }}
      aws-secret-access-key: ${{ steps.encrypt-aws-secret-access-key.outputs.out }}
      aws-session-token: ${{ steps.encrypt-aws-session-token.outputs.out }}
    steps:
      - uses: step-security/harden-runner@8ca2b8b2ece13480cda6dacd3511b49857a23c09 # v2.5.1
        with:
          disable-sudo: true
          egress-policy: audit
      - id: auth
        uses: aws-actions/configure-aws-credentials@04b98b3f9e85f563fb061be8751a0352327246b0 # v3.0.1
        with:
          aws-region: us-west-2
          role-to-assume: "${{ secrets.CI_ROLE_ARN }}"
      - id: encrypt-aws-access-key-id
        run: |
          encrypted=$(gpg --batch --yes --passphrase "$GPG_PASSPHRASE" -c --cipher-algo AES256 -o - <(echo "$AWS_ACCESS_KEY_ID") | base64 -w0)
          echo "out=$encrypted" >> $GITHUB_OUTPUT
        env:
          GPG_PASSPHRASE: ${{ secrets.TFPLAN_SECRET }}
      - id: encrypt-aws-secret-access-key
        run: |
          encrypted=$(gpg --batch --yes --passphrase "$GPG_PASSPHRASE" -c --cipher-algo AES256 -o - <(echo "$AWS_SECRET_ACCESS_KEY") | base64 -w0)
          echo "out=$encrypted" >> $GITHUB_OUTPUT
        env:
          GPG_PASSPHRASE: ${{ secrets.TFPLAN_SECRET }}
      - id: encrypt-aws-session-token
        run: |
          encrypted=$(gpg --batch --yes --passphrase "$GPG_PASSPHRASE" -c --cipher-algo AES256 -o - <(echo "$AWS_SESSION_TOKEN") | base64 -w0)
          echo "out=$encrypted" >> $GITHUB_OUTPUT
        env:
          GPG_PASSPHRASE: ${{ secrets.TFPLAN_SECRET }}

  tf-plan:
    name: Plan Terraform
    permissions:
      contents: read
    needs:
      - aws-auth
      - build-lambdas
    uses: ./.github/workflows/terraform-plan.yml
    if: always() && needs.build-lambdas.outputs.build-lambdas-result == 'success' && needs.aws-auth.result == 'success'
    with:
      ref: ${{ github.event.pull_request.head.sha }}
      bin-artifacts-key: ${{ needs.build-lambdas.outputs.lambda-artifacts-key }}
      bin-artifacts-path: ${{ needs.build-lambdas.outputs.lambda-artifacts-path }}
      aws-region: us-west-2
      tf-backend-config-file: staging.s3.tfbackend
      tf-var-file: staging.tfvars
      upload-artifacts: false
      artifacts-retention-days: 14
    secrets:
      aws-access-key-id: ${{ needs.aws-auth.outputs.aws-access-key-id }}
      aws-secret-access-key: ${{ needs.aws-auth.outputs.aws-secret-access-key }}
      aws-session-token: ${{ needs.aws-auth.outputs.aws-session-token }}
      datadog-api-key: ${{ secrets.DATADOG_API_KEY }}
      datadog-app-key: ${{ secrets.DATADOG_APP_KEY }}
      gpg-passphrase: ${{ secrets.TFPLAN_SECRET }}

  publish-tf-plan:
    name: Publish Terraform Plan
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    if: needs.tf-plan.result != 'skipped' || needs.tf-plan.result != 'cancelled'
    needs:
      - tf-plan
    steps:
      - uses: step-security/harden-runner@8ca2b8b2ece13480cda6dacd3511b49857a23c09 # v2.5.1
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            api.github.com:443
      - name: Reformat Plan
        run: |
          PLAN=$(echo "$PLAN_RAW_OUTPUT" | sed -E 's/^([[:space:]]+)([-+])/\2\1/g')
          echo "PLAN<<EOF" >> $GITHUB_ENV
          echo "$PLAN" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        env:
          PLAN_RAW_OUTPUT: ${{ needs.tf-plan.outputs.plan-output }}
      - name: Write the report markdown file
        run: |
          REPORT_FILE=$(mktemp -t summary.md.XXXXX)
          echo "REPORT_FILE=$REPORT_FILE" >> $GITHUB_ENV
          cat >> $REPORT_FILE << 'ENDOFREPORT'
          ## Terraform Summary

          | Step                         | Result  |
          |:-----------------------------|:-------:|
          | 🖌  Terraform Format & Style | ${{ (env.TF_FMT_OUTCOME == 'success' && '✅') || (env.TF_FMT_OUTCOME == 'skipped' && '➖') || '❌'  }} |
          | ⚙️  Terraform Initialization | ${{ (env.TF_INIT_OUTCOME == 'success' && '✅') || (env.TF_INIT_OUTCOME == 'skipped' && '➖') || '❌' }} |
          | 🤖  Terraform Validation     | ${{ (env.TF_VALIDATE_OUTCOME == 'success' && '✅') || (env.TF_VALIDATE_OUTCOME == 'skipped' && '➖') || '❌' }} |
          | 📖  Terraform Plan           | ${{ (env.TF_PLAN_OUTCOME == 'success' && '✅') || (env.TF_PLAN_OUTCOME == 'skipped' && '➖') || '❌' }} |

          ### Output

          <details>
          <summary>Validation Output</summary>

          ```
          ${{ env.TF_VALIDATE_OUTPUT }}
          ```

          </details>

          <details>
          <summary>Plan Output</summary>

          ```diff
          ${{ env.TF_PLAN_OUTPUT }}
          ```

          </details>

          *Pusher: @${{ env.GH_ACTOR }}, Action: `${{ env.GH_ACTION }}`, Workflow: [`${{ env.GH_WORKFLOW }}`](${{ env.GH_SERVER}}/${{ env.GH_REPO }}/actions/runs/${{ env.GH_RUN_ID }})*
          ENDOFREPORT
        env:
          TF_FMT_OUTCOME: ${{ needs.tf-plan.outputs.fmt-outcome }}
          TF_INIT_OUTCOME: ${{ needs.tf-plan.outputs.init-outcome }}
          TF_VALIDATE_OUTCOME: ${{ needs.tf-plan.outputs.validate-outcome }}
          TF_VALIDATE_OUTPUT: ${{ needs.tf-plan.outputs.validate-output }}
          TF_PLAN_OUTCOME: ${{ needs.tf-plan.outputs.plan-outcome }}
          TF_PLAN_OUTPUT: ${{ env.PLAN }}
          GH_ACTOR: ${{ github.actor }}
          GH_ACTION: ${{ github.event_name }}
          GH_WORKFLOW: ${{ github.workflow }}
          GH_SERVER: ${{ github.server_url }}
          GH_REPO: ${{ github.repository }}
          GH_RUN_ID: ${{ github.run_id }}
      - name: Write the step summary
        run: cat $REPORT_FILE | head -c 65500 >> $GITHUB_STEP_SUMMARY # Observe GitHub's 65535 character limit
      - name: Write the comment body
        id: comment-body
        run: |
          CONTENT=$(cat $REPORT_FILE)
          echo "REPORT_CONTENT<<ENDOFREPORT" >> $GITHUB_OUTPUT
          echo "$CONTENT" >> $GITHUB_OUTPUT
          echo "ENDOFREPORT" >> $GITHUB_OUTPUT
      - name: Find previous report comment
        uses: peter-evans/find-comment@v2
        id: find-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Terraform Summary
      - name: Create or update comment
        if: always()
        uses: peter-evans/create-or-update-comment@v2
        with:
          comment-id: ${{ steps.find-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: ${{ steps.comment-body.outputs.REPORT_CONTENT }}
          edit-mode: replace
