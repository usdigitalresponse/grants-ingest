name: Terraform Apply

permissions:
  contents: read

on:
  workflow_call:
    inputs:
      bin-artifacts-key:
        type: string
        required: true
      bin-artifacts-path:
        type: string
        required: true
      tf-plan-artifacts-key:
        type: string
        required: true
      tf-backend-config-file:
        type: string
        required: true
      aws-region:
        type: string
        required: true
      environment-name:
        type: string
        required: true
      concurrency-group:
        description: Name of the concurrency group (avoids simultaneous Terraform execution against the same environment)
        type: string
        default: run_terraform
    secrets:
      aws-access-key-id:
        required: true
      aws-secret-access-key:
        required: true
      aws-session-token:
        required: true
      datadog-api-key:
        required: true
      datadog-app-key:
        required: true
      gpg-passphrase:
        required: true

jobs:
  do:
    name: Apply Terraform from Plan
    runs-on: ubuntu-latest
    permissions:
      contents: read
    defaults:
      run:
        working-directory: terraform
    env:
      AWS_DEFAULT_REGION: ${{ inputs.aws-region }}
      AWS_REGION: ${{ inputs.aws-region }}
      TF_CLI_ARGS: "-no-color"
      TF_IN_AUTOMATION: "true"
      TF_INPUT: 0
      TF_PLUGIN_CACHE_DIR: ~/.terraform.d/plugin-cache
    environment: ${{ inputs.environment-name }}
    concurrency:
      group: ${{ inputs.concurrency-group }}
      cancel-in-progress: false
    steps:
      - uses: step-security/harden-runner@63c24ba6bd7ba022e95695ff85de572c04a18142 # v2.7.0
        with:
          disable-sudo: true
          egress-policy: block
          allowed-endpoints: >
            *.amazonaws.com:443
            actions-results-receiver-production.githubapp.com:443
            api.datadoghq.com:443
            checkpoint-api.hashicorp.com:443
            github.com:443
            objects.githubusercontent.com:443
            registry.terraform.io:443
            releases.hashicorp.com:443
      - name: Download Terraform artifacts
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: ${{ inputs.tf-plan-artifacts-key }}
          path: ${{ github.workspace }}/terraform
      - name: Clear any cached provider plugins in artifact
        run: rm -rf "$TF_PLUGIN_CACHE_DIR"
      - name: Get project TF version
        id: get_tf_version
        run: echo "TF_VERSION=$(cat .terraform-version | tr -d '[:space:]')" | tee -a $GITHUB_OUTPUT
      - uses: hashicorp/setup-terraform@651471c36a6092792c552e8b1bef71e592b462d8 # v3.1.1
        with:
          terraform_version: ${{ steps.get_tf_version.outputs.TF_VERSION }}
      - name: Download Lambda handler artifacts
        uses: actions/download-artifact@65a9edc5881444af0b9093a5e628f2fe47ea3b2e # v4.1.7
        with:
          name: ${{ inputs.bin-artifacts-key }}
          path: ${{ inputs.bin-artifacts-path }}
      - name: Decrypt plan file
        run: gpg -qd --batch --yes --passphrase "$GPG_PASSPHRASE" -o tfplan tfplan.gpg
        env:
          GPG_PASSPHRASE: ${{ secrets.gpg-passphrase }}
      - id: decrypt-aws-access-key-id
        run: |
          decrypted=$(gpg -qd --batch --yes --passphrase "$GPG_PASSPHRASE" -o - <(echo "$VALUE" | base64 -d))
          echo "::add-mask::${decrypted}"
          echo "out=${decrypted}" >> $GITHUB_OUTPUT
        env:
          GPG_PASSPHRASE: ${{ secrets.gpg-passphrase }}
          VALUE: ${{ secrets.aws-access-key-id }}
      - id: decrypt-aws-secret-access-key
        run: |
          decrypted=$(gpg -qd --batch --yes --passphrase "$GPG_PASSPHRASE" -o - <(echo "$VALUE" | base64 -d))
          echo "::add-mask::${decrypted}"
          echo "out=${decrypted}" >> $GITHUB_OUTPUT
        env:
          GPG_PASSPHRASE: ${{ secrets.gpg-passphrase }}
          VALUE: ${{ secrets.aws-secret-access-key }}
      - id: decrypt-aws-session-token
        run: |
          decrypted=$(gpg -qd --batch --yes --passphrase "$GPG_PASSPHRASE" -o - <(echo "$VALUE" | base64 -d))
          echo "::add-mask::${decrypted}"
          echo "out=${decrypted}" >> $GITHUB_OUTPUT
        env:
          GPG_PASSPHRASE: ${{ secrets.gpg-passphrase }}
          VALUE: ${{ secrets.aws-session-token }}
      - name: Terraform Init
        run: terraform init
        env:
          AWS_ACCESS_KEY_ID: "${{ steps.decrypt-aws-access-key-id.outputs.out }}"
          AWS_SECRET_ACCESS_KEY: "${{ steps.decrypt-aws-secret-access-key.outputs.out }}"
          AWS_SESSION_TOKEN: "${{ steps.decrypt-aws-session-token.outputs.out }}"
          TF_CLI_ARGS_init: "-backend-config=${{ inputs.tf-backend-config-file }}"
      - name: Terraform Apply
        run: terraform apply tfplan
        env:
          AWS_ACCESS_KEY_ID: "${{ steps.decrypt-aws-access-key-id.outputs.out }}"
          AWS_SECRET_ACCESS_KEY: "${{ steps.decrypt-aws-secret-access-key.outputs.out }}"
          AWS_SESSION_TOKEN: "${{ steps.decrypt-aws-session-token.outputs.out }}"
