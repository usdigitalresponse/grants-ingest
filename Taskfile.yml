# yaml-language-server: $schema=https://taskfile.dev/schema.json
# https://taskfile.dev

version: '3'

output: prefixed

tasks:
  default:
    silent: true
    interactive: true
    cmds:
      - cmd: task --list
      - cmd: printf "\nRun \"task --help\" for more information.\n"

  check:
    desc: >-
      Simulates all steps of the "QA" job executed during the pull request CI workflow
    cmds:
      - task: prebuild-lambda
      - task: check-tasks

  check-tasks:
    internal: true
    deps:
      - fmt
      - test
      - lint
      - vet
      - build

  test:
    desc: "Runs unit tests and updates the HTML coverage report"
    run: once
    prefix: "test output"
    cmds:
      - go test -race -covermode=atomic -coverprofile=cover.out {{ .CLI_ARGS }} ./...
      - task: coverage-report-html
    sources:
      - ./**/*.go
      - ./Taskfile.yml
      - ./go.mod
      - ./go.sum

  coverage-report-html:
    desc: "Writes an HTML coverage report to cover.html"
    cmds:
      - go tool cover -html=cover.out -o cover.html
    sources:
      - ./cover.out
    generates:
      - ./cover.html

  lint:
    desc: "Runs the staticcheck linter utility"
    vars:
      FORMAT: '{{ default "stylish" .FORMAT }}'
    cmds:
      - "staticcheck -f {{ .FORMAT }} ./..."
    sources:
      - ./**/*.go

  generate:
    desc: "Discovers and runs all go:generate directives for the entire project"
    cmds:
      - go generate ./...

  fmt:
    desc: Runs `go fmt` for the entire project
    cmds:
      - go fmt ./...
    sources:
      - ./**/*.go

  vet:
    desc: Runs `go vet` for the entire project
    cmds:
      - go vet ./...
    sources:
      - ./**/*.go

  clean:
    desc: "Removes generated content from ./bin and ./build directories"
    silent: true
    cmds:
      - find ./bin -mindepth 1 -type d -exec rm -rf {} + -print
      - find ./build -mindepth 1 -type d -exec rm -rf {} + -print

  build-cli:
    run: when_changed
    desc: Compiles the grants-ingest CLI utility
    vars:
      BUILD_BIN: bin/grants-ingest
    env:
      GOPATH:
        sh: go env GOPATH
    cmds:
      - go build -gcflags="-trimpath=$GOPATH" -asmflags="-trimpath=$GOPATH" -trimpath -v -o {{ .BUILD_BIN }} ./cli/grants-ingest
      - cmd: echo {{ .BUILD_BIN }}
        silent: true
    sources:
      - ./cli/grants-ingest/**/*.go
      - ./go.mod
      - ./go.sum
      - ./Taskfile.yml
    generates:
      - "{{ .BUILD_BIN }}"

  prebuild-lambda:
    run: always
    desc: Batch-compiles all Lambda handlers to /dev/null to optimize future builds
    cmds:
      - task: go-build-lambda
        vars:
          LABEL: "prebuild-lambda"
          BUILD_DEST: /dev/null
          SOURCE: ./cmd/...

  build-lambda:
    internal: true
    run: when_changed
    label: "build-{{ .LAMBDA_CMD }}"
    vars:
      BUILD_DIR: bin/{{ .LAMBDA_CMD }}
      BUILD_BIN: "{{ .BUILD_DIR }}/bootstrap"
      SOURCE: ./cmd/{{ .LAMBDA_CMD }}/...
    env:
      GOPATH:
        sh: go env GOPATH
    cmds:
      - task: go-build-lambda
        vars:
          LABEL: "build-{{ .LAMBDA_CMD }}"
          BUILD_DEST: "{{ .BUILD_BIN }}"
          SOURCE: "{{ .SOURCE }}"
      - cmd: echo {{ .BUILD_BIN }}
        silent: true
    sources:
      - ./**/*.go
      - ./Taskfile.yml
      - ./go.mod
      - ./go.sum
    generates:
      - "{{ .BUILD_BIN }}"

  go-build-lambda:
    internal: true
    run: always
    label: "{{ .LABEL }}"
    env:
      GOPATH:
        sh: go env GOPATH
    cmds:
      - GOOS=linux GOARCH=arm64 go build -gcflags="-trimpath=$GOPATH" -ldflags="-s -w" -asmflags="-trimpath=$GOPATH" -trimpath -tags "lambda.norpc" -v -o {{ .BUILD_DEST }} {{ .SOURCE }}

  build:
    desc: "Compiles all Lambda handlers"
    deps:
      - build-DownloadGrantsGovDB
      - build-SplitGrantsGovXMLDB
      - build-PublishGrantEvents
      - build-EnqueueFFISDownload
      - build-PersistGrantsGovXMLDB
      - build-DownloadFFISSpreadsheet
      - build-SplitFFISSpreadsheet
      - build-ExtractGrantsGovDBToXML
      - build-ReceiveFFISEmail

  build-DownloadGrantsGovDB:
    desc: Compiles DownloadGrantsGovDB
    cmds:
      - task: build-lambda
        vars:
          LAMBDA_CMD: DownloadGrantsGovDB

  build-SplitGrantsGovXMLDB:
    desc: Compiles SplitGrantsGovXMLDB
    cmds:
      - task: build-lambda
        vars:
          LAMBDA_CMD: SplitGrantsGovXMLDB

  build-ExtractGrantsGovDBToXML:
    desc: Complies ExtractGrantsGovDBToXML
    cmds:
      - task: build-lambda
        vars:
          LAMBDA_CMD: ExtractGrantsGovDBToXML

  build-EnqueueFFISDownload:
    desc: Compiles EnqueueFFISDownload
    cmds:
      - task: build-lambda
        vars:
          LAMBDA_CMD: EnqueueFFISDownload

  build-PersistGrantsGovXMLDB:
    desc: Compiles PersistGrantsGovXMLDB
    cmds:
      - task: build-lambda
        vars:
          LAMBDA_CMD: PersistGrantsGovXMLDB

  build-DownloadFFISSpreadsheet:
    desc: Compiles DownloadFFISSpreadsheet
    cmds:
      - task: build-lambda
        vars:
          LAMBDA_CMD: DownloadFFISSpreadsheet

  build-PersistFFISData:
    desc: Compiles PersistFFISData
    cmds:
      - task: build-lambda
        vars:
          LAMBDA_CMD: PersistFFISData

  build-SplitFFISSpreadsheet:
    desc: Compiles SplitFFISSpreadsheet
    cmds:
      - task: build-lambda
        vars:
          LAMBDA_CMD: SplitFFISSpreadsheet

  build-PublishGrantEvents:
    desc: Compiles build-PublishGrantEvents
    cmds:
      - task: build-lambda
        vars:
          LAMBDA_CMD: PublishGrantEvents

  build-ReceiveFFISEmail:
    desc: Compiles build-ReceiveFFISEmail
    cmds:
      - task: build-lambda
        vars:
          LAMBDA_CMD: ReceiveFFISEmail
